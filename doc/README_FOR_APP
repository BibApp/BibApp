h1. The BibApp

Hi! "The BibApp":http://code.google.com/p/bibapp/ is a "Ruby on Rails":http://rubyonrails.org/ application.  If you don't know Rails, you should learn it.  If you don't have the BibApp up in 5 minutes, you'd do best to study Rails a bit more before proceeding.

Cheers,
Eric and Nate

"Eric Larson":mailto:elarson@library.wisc.edu - Digital Services Librarian, "Wendt Library":http://wendt.library.wisc.edu

"Nathan Vack":mailto:njvack@wisc.edu - Head of Computer Services, "Wendt Library":http://wendt.library.wisc.edu

"University of Wisconsin-Madison":http://www.wisc.edu
"UW-Madison Libraries' Office of Scholarly Communication and Publishing":http://oscp.library.wisc.edu

h2. Contents:

* Caveat Emptor!
* Copyright / License
* Download / Install
** Requirements
** Config
** Bootstrap
* Accounts
* Add...
** People
** Groups
** Citations
* Admin...
** Collect articles
** Prepare DSpace batch import packages
** Collect citations via RSS (Bloglines)
* Questions?

h3. Caveat Emptor!

This version of the BibApp is an *experimental build*.  Some of the code is great, some is not.  The simple truth is this software is not ready for "production" and you can *expect it to break and misbehave*.  Sorry, but life is hard and this is free software (Think: "Yeah, a free kitten!"). 

If you think the BibApp could be an important tool for your school/organization/employer/sense-of-peace, "email Eric":elarson@library.wisc.edu and say you want to be a friend of BibApp. (No expectations whatsoever), we're just looking to make friends.

h3. Copyright / License

Copyright 2007 The Board of Regents of the University of Wisconsin System.

The BibApp is free software; you may redistribute it and/or modify it under the terms of version 2 of the GNU General Public License as published by the Free Software Foundation.

The BibApp is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with the BibApp; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.

h3. Download / Install

The source code is available on Google Projects.  Here's the URL:
http://code.google.com/p/bibapp/

If you're already on Rails, you should be ok... Otherwise, you'll need to "install Rails":http://www.rubyonrails.org/down or install an "all-in-one" Rails bundle:
 
* "OS X - Locomotive":http://locomotive.sourceforge.net/
* "PC - Instant Rails":http://instantrails.rubyforge.org/

h4. Requirements

* Rails 1.2.2
* A database: MySQL, PostgreSQL, SQLite, Oracle, SQL Server, DB2, or Firebird.

 *Ruby Gems:*

* xmlsimple
* maybe some more? (sorry, :LIH => "Life is Hard")

h4. Config

The _config_ directory contains YAML files you'll need to point to various resources:

* database.yml
* ldap.yml
* bloglines.yml (More info below)

h4. Bootstrap!

1. In your terminal, in the Rails app base-dir, run this command: "rake db:migrate".
2. Start your browser: "mongrel_rails start" (or whatever you roll)

h3. Accounts

Create at least one user to get started.  Visit:  "http://localhost:3000/account/signup":http://localhost:3000/account/signup and create a user. NOTE: Substitute localhost:3000 for your environment requirements.

You will have strong opinions regarding who should have user accounts, how they should be created and used.  The simple plugin we use is good for development and testing, but you'll want to consider something better in the future.

h3. How to Add...

h4. People

Add people via the "http://localhost:3000/people/new":http://localhost:3000/people/new

*Fast*
A web form allows calls to your campus LDAP (you added your LDAP connection above, right?). LDAP is not the best, but we ALL have it. LDAP is a good place to begin, but you'll want to tweak the LDAP import mapping to use your institution's attributes.

*Slow*
Add people by hand.

h4. Groups

After adding a person, you'll be at their edit page.  Choose to "edit groups" for your new person.

h4. Citations

*Sources*
The heart of the matter.  At UW-Madison, we use a combination of licensed databases, indices, CVs and departmental reports to find citations.  Frankly, we use whatever data we can get our hands on.  The BibApp will try really hard to auto-detect duplicate citations so you can focus on gathering more data, not trying to collect perfect sets of citations.

*NOTICE:* Proprietary databases/indexes have limits on what can and can not be done with their data.  The BibApp can be used in a copywrong fashion.  Be warned.  Act carefully.  We suggest contacting your campus legal services for advice.

*Behind the scenes*
The BibApp matches people with citations via authorship records.  When a citation is added to the BibApp, you are really adding an authorship record to the database.

We use a portion of the citation data to create a unique key for that citation (key1).  We check the database to see if another citation already has that key (select all from citations where key = key1).  If there are no duplicates, you've got a new citation (citation = Citation.new(key1)).  If there is a matching key already in the database, you've got a duplicate (citation = previously_existing_key).  Whichever it is, the BibApp creates an authorship record for your person with the correct citation key.

This method of matching citation keys allows us to see who's publishing with who within the BibApp.  It also shows us who's publishing inside and outside of their department.

It is also _sadly_ not 100% accurate.  Again, life is hard.

*Citation formats supported*
 
* RefWorks XML
* Medline tagged
* RIS
* BibTeX

h5. Workflow for gathering citations at UW-Madison

*NOTICE:* you can use any citation manager you want, you *do not* need RefWorks.  It is *highly recommended* that you choose one (RefWorks, EndNote, Zotero, etc.) and collect all of your citations there, especially as the BibApp is not "production" yet...

*Refworks*
Every department gets a RefWorks account (Physics department, etc).  Inside those accounts, we have a folder for each person in the department (Smith, John...).  Since the BibApp aims to be an "institutional bibliography", we collect all UW-Madison citations for "John Smith" within that folder (duplicates and all).

Example database search query: "John Smith: Au, wisc: Af"

When we're done collecting citations, we export the RefWorks folder as XML, renaming it with John Smith's person.id from the BibApp: 12345.xml, now it's ready for import.  Pretty simple stuff.

*Add citations*
Find your person in the BibApp via the search option.  You can add citations in the "person/edit" view.

h3. Admin

h4. Collect articles

View "http://localhost:3000/admin/archive":http://localhost:3000/admin/archive to collect citations marked "ready for archive".  If a citation has an archive_status_id of 2 (Ready for archiving), it will appear in the list of items to archive.  Currently, we know two publishers who allow us to place a "publisher copy" of an article into our institutional repository: IEEE and AIP.  Articles from these publishers are added automatically to the list.

*Instructions*

1. Visit "http://localhost:3000/admin/archive":http://localhost:3000/admin/archive
2. Find the article via "Find It" (point this at your OpenURL resolver), via "Direct Link", or via "old-fashioned search and retrieve yourself".
3. Verify the article matches your citation.  If it does, copy the BibApp citation_id (large number to the left of the citation) and use that id to rename the PDF you've found. Save the PDFs you collect somewhere local and easy to find.
4. "Mark as saved"

*Optional:* If a citation is too hard to find, "Send to bottom"--puts the citation at the bottom of the list.  If a citation is junk, "Mark as forgetit"--removes the citation from the list.

h4. Prepare DSpace batch import files

Captured a lot of papers?  Prepare a DSpace batch import package.  

*Instructions*

1. Create two directories: "tmp/archive_upload" and "tmp/archive_output".
2. Place the PDFs you have collected into "archive_upload".
3. Visit "http://localhost:3000/archives/create":http://localhost:3000/archives/create Here, you'll see how well you've done.  Proceed to the last step if you're ready.
4. Select "Prepare batch for MINDS@UW" (you'll change the button label for your repository).
5. All the metadata and files are bundled and output to "archive_output".  Zip the file and send it to your DSpace admin.

h4. Collect citations via RSS (Bloglines)

We use "Bloglines":http://www.bloglines.com (an RSS aggregator) to help us locate new citations for people in the BibApp.  It helps normalize RSS feeds, provides a nice admin interface for adding/editing/deleting feeds for multiple people and has a very simple API.

*Setup*

1. Create a Bloglines account for a department, add the bloglines login/password to config/bloglines.yml
2. Create a folder for each person in the department with this naming convention: LastName, FirstName | PersonId
3. Seriously, your folders need to follow the naming convention above...
4. Create alerts for your people in your varying databases (Web of Knowledge, PubMed, Engineering Village, etc.)
5. Subscribe to the feeds, placing them withing the proper folder

Example: Smith, John | 12345 > PubMed

*Instructions*

1. From your Rails app base (~/Sites/bibapp?), run this command: script/bloglines_import It will visit each department's Bloglines account as listed in config/bloglines.yml and download any new feed items.
2. Visit "http://localhost:3000/admin/feeds":http://localhost:3000/admin/feeds
3. Follow the feed post title to collect the citation data.
4. Paste it in the web form or browse to a file.
5. Repeat as necessary.