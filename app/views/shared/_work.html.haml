-#
-# Render Information about the Work
-#
-# Possible Input Variables:
-#    :work         => work to display (REQUIRED)
-#    :allow_select => whether or not to display checkbox next to displayed work
-#    :show_status  => display status of work in BibApp (dupe, accepted, etc.)
-#    :show_dupe    => display possible accepted works for dupes
-#    :links_array  => Array of default links to display under the work
-#                     Valid values: {:find_it, (local library "find it" link)
-#                                    :cart,    (adds/removes from cart)
-#                                    :edit}    (edit work)
                                 

-# Initialize optional input variables
- allow_select ||= false
- show_status ||= false
- show_dupes ||= false
- links_array ||= [:find_it, :cart]  #default to just 'find_it' and 'cart' links

%li.work{:class => "#{cycle('odd','even')}"}
  -#If work can be selected (and user is logged in), add a checkbox
  - if allow_select && logged_in?
    %div.select_multiple
      = check_box_tag "work_id[]", "#{work['pk_i']}"

  -if show_dupes
    -#If this is a duplicate (status==2), display the "accepted" work this is a duplicate of
    -if work['status']==2
      = render :partial => "shared/duplicate_of_work", :locals => {:work => work}

  -# Change the class name depending on dupe or not
  -the_class = "screen-format"
  -if show_dupes
    -the_class = "screen-format-dupes"

  -#Display the work
  %div{:class => the_class}
    - if work['issn_isbn'] != nil
      %span{:title => "ISBN:#{work['issn_isbn'].gsub(" ", "")}", :class =>"gbs-thumbnail gbs-link-to-preview", :style=>"float:right;padding:3px;"}
    %strong=link_to "#{work['title']}", work_path(work['pk_i'])
    %h5{:style=>"font-size:0.75em;padding:0;margin:0;color:#999"}=work['type']
    -#display status of a work, if specified
    = render :partial => "shared/work_status", :locals => {:work => work} if show_status
    
    = render :partial => "shared/work_subclasses/#{work['type'].downcase.gsub(" ", "_")}", :locals => {:work => work}

    .links
      -links_array.each do |link|

        -#"Find It" Link
        -if link==:find_it
          =link_to_findit(work)

        -#"Add to Cart" and "Remove from Cart" links
        -if link==:cart
          - if !@cart.nil? && !@cart.items.nil?
            - if @cart.items.include?(work['pk_i'].to_i)
              =link_to_remove_from_cart(work['pk_i'])
          - if @cart.nil? || !@cart.items.include?(work['pk_i'].to_i)
            =link_to_add_to_cart(work['pk_i'])

        -#"Edit" link
        -if link==:edit
          -if !@return_path.nil?  #if return path specified, add it to 'edit' path...
            =link_to "Edit", edit_work_path(work['pk_i'], :return_path=>@return_path)
          -if @return_path.nil?
            =link_to "Edit", edit_work_path(work['pk_i'])

        -#As long as not last link, add a vertical pipe between links
        -unless link==links_array.last
          ="|"
  %div{:style=>"clear:both;"}