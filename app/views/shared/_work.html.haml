-#
-# Render Information about the Work
-#
-# Possible Input Variables:
-#    :work         => work to display (REQUIRED)
-#    :allow_select => whether or not to display checkbox next to displayed work
-#    :show_status  => display status of work in BibApp (dupe, accepted, etc.)
-#    :show_dupe    => display possible accepted works for dupes
-#    :links_array  => Array of default links to display under the work
-#                     Valid values: {:find_it, (local library "find it" link)
-#                                    :saved,   (adds/removes from saved)
-#                                    :edit,    (edit work)
-#                                    :none     (trumps all)}

- include_stylesheet('specific/shared/_work')
-# Initialize optional input variables
- allow_select ||= false
- show_status ||= false
- show_dupes ||= false
- links_array ||= [:find_it, :saved]  #default to just 'find_it' and 'saved' links

%li.work{:class => "#{cycle('odd','even')}"}
  -#If work can be selected (and user is logged in), add a checkbox
  - if allow_select && logged_in?
    .select_multiple
      = check_box_tag "work_id[]", "#{work['pk_i']}"

  -if show_dupes
    -#If this is a duplicate (status==2), display the "accepted" work this is a duplicate of
    -if work['status'] == Work::STATE_DUPLICATE
      = render "shared/duplicate_of_work", :work => work

  -# Change the class name depending on dupe or not
  -the_class = show_dupes ? "screen-format-dupes" : "screen-format"

  -#Display the work
  %div{:class => the_class}
    - if work['issn_isbn'] && work['issn_isbn'].length > 9
      %span.gbs-thumbnail.gbs-link-to-preview.work-preview{:title => "ISBN:#{work['issn_isbn'].gsub(' ', '')}"}
    %strong #{link_to "#{work['title']}", work_path(work['pk_i'])}
    %h5.work-type #{work['type']}
    -#display status of a work, if specified
    = render("shared/work_status", :work => work) if show_status
    = render "shared/work_subclasses/#{work['type'].downcase.gsub(" ", "_")}", :work => work

    .links
      - unless links_array.include? 'none'
        - links_array.each do |link|

          -#"Find It" Link
          -if link == :find_it
            = link_to_findit(work)

          -#"Add to Saved" and "Remove from Saved" links
          -if link == :saved
            - if @saved && @saved.items
              - if @saved.items.include?(work['pk_i'].to_i)
                %strong Saved -
                = link_to "Remove ", remove_from_saved_work_url(work['pk_i'])
            - if @saved.nil? || @saved.items.exclude?(work['pk_i'].to_i)
              = link_to "Save", add_to_saved_work_url(work['pk_i'])

          -#"Edit" link
          - if link==:edit
            =link_to "Edit", edit_work_path(work['pk_i'], :return_path=>@return_path)

          -#As long as not last link, add a vertical pipe between links
          - unless link==links_array.last
            |
  .clear-both