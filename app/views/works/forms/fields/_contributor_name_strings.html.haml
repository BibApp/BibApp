-# Add an contributors field, with Auto-Complete.
-# Also adds a list of existing contributors

-# Get the roles for this work subklass
-# Need arrays for the select box: <option value="Author">Author</option>
- roles = @work.class.roles
-#Delete the first role; it's Author
- first_role = roles.delete_at(0)

-# Get the contributors associated with this work
-# We won't take the first role, because it's the Author,
-# which is displayed seperately
- contributors = @work.work_name_strings.collect{ |wns| {:name => wns.name_string.name, :role => wns.role} unless wns.role == first_role} if @work.name_strings
- contributors.compact!

-#  @editor_name_strings should only exist if there were errors in saving work
- contributors = @editor_name_strings if @editor_name_strings

- count = 0
%div.author_block
  = label :author, :string, "Contributor(s):"
  %span{:style=>"color:grey"} Format: LastName, FirstName Middle (e.g., Smith, John L.)

  %ol#contributor_name_strings_list
    -# Build list of contributors
    - if contributors.empty?
      %li.list_item{:id => "contributor_#{count}", :class => "movable"}
        %select{:id => "contributor_roles[]", :name => "contributor_roles[]"}
          - roles.each do |r|
            - if r == roles[0]
              %option{:selected => "selected", :value => r}
                = r
            - else
              %option{:value => r}
                = r
        -#= text_field_with_auto_complete :contributor, :string, {:class=>'text',:value =>"#{@person.last_first if @person}"}, {:method => :get, :skip_style => true, :on_show => "function(element, update) {show_autocomplete_names(element, update);}", :on_hide => "function(element, update) {hide_autocomplete_names(element, update);}"}
        = text_field_tag "contributors[]", nil, {:class=>'text'}
        = link_to "[remove]", :url => { :action => :remove_contributor_from_list, :ns_id => count}, :remote => true
    -else
      - contributors.each do |contributor|
        = render :partial => 'works/forms/fields/contributor_list_item', :locals => {:ns_id=>count, :ns_name=>contributor[:name], :ns_role=>contributor[:role]}
        - count += 1

  -# Ajax-enabled link to add new items to below list
  = link_to "[add more contributors]", :url => { :action => :add_contributor_to_list}, :with => "'ns_id='+$('contributor_name_strings_list').childElements().length+'&work_type=#{@work.class}'", :remote => true

  -# Call Javascript action to make the above author list sortable, so users can change order of authors.
  -# NOTE: params passed to sortable_element NEED to be the same as the page.sortable() call in 'item_list.js.rjs'
  = sortable_element 'contributor_name_strings_list', :update => 'list_hint', :only => 'movable', :url => {:action => "reorder_list", :list_type =>'contributor_name_strings'}, :complete => visual_effect(:highlight, 'list_hint', :duration => 1.5)
