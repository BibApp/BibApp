-# Add an Author field, with Auto-Complete.
-# Also adds a list of existing Authors

-# Get the first role for this work subklass (usually Author)
- role = @work.class.roles[0]

-# Get the authors associated with this work
-# We won't take the first role, because it's the Author,
-# which is displayed seperately
- authors = @work.work_name_strings.collect{ |wns| {:name => wns.name_string.name, :role => wns.role} if wns.role == role} if @work.name_strings
- authors.compact!

-#  @author_name_strings should only exist if there were errors in saving work
- authors = @author_name_strings if @author_name_strings

- count = 0
%div.author_block
  = label :author, :string, "#{role}(s):"
  %span{:style=>"color:grey"} Format: LastName, FirstName Middle (e.g., Smith, John L.)

  %ol#author_name_strings_list
    -# Build list of authors
    - if authors.empty?
      %li.list_item{:id => "author_#{count}", :class => "movable"}
        -#= text_field_with_auto_complete :author, :string, {:class=>'text'}, {:method => :get, :skip_style => true, :on_show => "function(element, update) {show_autocomplete_names(element, update);}", :on_hide => "function(element, update) {hide_autocomplete_names(element, update);}"}
        = hidden_field_tag "author_roles[]", "#{role}"
        = text_field_tag "authors[]", nil, {:class => 'text'}
        = link_to_remote "[remove]", :url => { :action => :remove_author_from_list, :ns_id => count}
    -else
      - authors.each do |author|
        = render :partial => 'works/forms/fields/author_list_item', :locals => {:ns_id=>count, :ns_name=>author[:name], :ns_role=>author[:role]}
        - count += 1

  -# Ajax-enabled link to add new items to below list
  = link_to_remote "[add more #{role.downcase}s]", :url => { :action => :add_author_to_list}, :with => "'ns_id='+$('author_name_strings_list').childElements().length+'&work_type=#{@work.class}'"

  -# Call Javascript action to make the above author list sortable, so users can change order of authors.
  -# NOTE: params passed to sortable_element NEED to be the same as the page.sortable() call in 'item_list.js.rjs'
  = sortable_element 'author_name_strings_list', :update => 'list_hint', :only => 'movable', :url => {:action => "reorder_list", :list_type =>'author_name_strings'}, :complete => visual_effect(:highlight, 'list_hint', :duration => 1.5)
