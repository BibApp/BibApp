-# Add an Editor field, with Auto-Complete.
-# Also adds a list of existing Editors

-# Initialize our list of editors
-#  Default: use editors assigned to @work.
-#  @editor_name_strings should only exist if there were errors in saving work
- editors = @work.name_strings.editor if @work.name_strings.editor
- editors = @editor_name_strings if @editor_name_strings

= label :editor, :string, t('works.forms.fields.editor_name_strings.label')
= text_field_with_auto_complete :editor, :string, {:class=>'text'},
  {:method => :get, :skip_style => true,
  :on_show => "function(element, update) {show_autocomplete_names(element, update);}",
  :on_hide => "function(element, update) {hide_autocomplete_names(element, update);}", :frequency => 0.5}
-# Ajax-enabled link to add new items to below list
= link_to_remote t('works.forms.fields.editor_name_strings.add'), :url => add_item_to_list_works_url, :condition => "$('editor_string').value.length > 0",
  :with => "'list_type=editor_name_strings&item_value='+$F('editor_string')+'&item_class=movable&sortable=true&clear_field=editor_string'"
-# If more than one editor name, add a hint for how to reorder them
- if editors and editors.length > 1
  %p#list_hint
    = t('works.forms.fields.editor_name_strings.drag')
%ol.form_item_list#editor_name_strings_list
  = render 'works/forms/fields/editor_name_strings_list', :editors => editors
  -# make the editor list sortable, so users can change order of editors.
  -# NOTE: params passed to sortable_element NEED to be the same as the page.sortable() call in 'item_list.js.rjs'
  = sortable_element 'editor_name_strings_list', :update => 'list_hint',
    :url => {:action => "reorder_list", :list_type =>'editor_name_strings'},
    :complete => visual_effect(:highlight, 'list_hint', :duration => 1.5)
