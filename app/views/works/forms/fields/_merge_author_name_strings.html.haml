-# Add an Author field, with Auto-Complete.
-# Also adds a list of existing Authors

%td.duplicate
  -# Initialize our list of authors
  - authors = @dupe.name_strings.author if @dupe.name_strings.author
  = label_tag 'dupe_author_name_strings[]', "#{t 'works.forms.fields.merge_author_name_strings.label'}:"
  -# Build list of authors
  - if authors
    - authors.each do |author|
      %br/
      = text_field_tag 'dupe_author_name_strings[]', self_or_name(author), {:class => 'text', :readonly => 'readonly'}
%td
  -# Initialize our list of authors
  -#  Default: use authors assigned to @work.
  -#  @author_name_strings should only exist if there were errors in saving work
  - authors = @work.name_strings.author if @work.name_strings.author
  - authors = @author_name_strings if @author_name_strings
  = label :author, "#{t 'works.forms.fields.merge_author_name_strings.label'}:"
  %br/
  = text_field :author, :string, :class=>'text', :value => "#{@person.last_first if @person}"
  -# Ajax-enabled link to add new items to below list
  = link_to_remote t('app.add'), :url => add_item_to_list_works_url, :condition => "$('author_string').value.length > 0",
     :with => "'list_type=author_name_strings&item_value='+$F('author_string')+'&item_class=movable&sortable=true&clear_field=author_string'"
  -# Build list of authors
  - if authors and authors.length>1
    %p#list_hint
      = t('works.forms.fields.merge_author_name_strings.instructions')
  = render 'works/forms/fields/merge_author_name_strings_list', :authors => authors
  -# Call Javascript action to make the above author list sortable, so users can change order of authors.
  -# NOTE: params passed to sortable_element NEED to be the same as the page.sortable() call in 'item_list.js.rjs'
  = sortable_element 'author_name_strings_list', :update => 'list_hint', :only => 'movable',
    :url => {:action => "reorder_list", :list_type =>'author_name_strings'},
    :complete => visual_effect(:highlight, 'list_hint', :duration => 1.5)
