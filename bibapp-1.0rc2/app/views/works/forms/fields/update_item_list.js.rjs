# item_list.js.rjs
# This file generates javascript which will add/remove items
# to a list of items under a form field.  Used in conjunction
# with /work/forms/fields/list_item partial to build a dynamic list.
#
# Note: requires the following structure for a <ol> or <ul>
#  (See below for a reference to the various variables)
#   <ul id='#{@list_type}_list'>
#     <li id='#{@list_type}_#{@item_id}' class='movable'>
#       #{@item_value} or other info
#     </li>
#   </ul>
#   
#   For 'sortable' lists, you also must have a field with @id='list_hint',
#   either below or above the sortable list:
#   <p id='list_hint'>Drag and drop to reorder items</p>
#
#
# Possible Actions and Required Inputs for each action:
# 
#   ADD NEW ITEM (@update_action => 'add')
#     @list_type => (REQUIRED) Type of item list (e.g. "author_name_strings", "tags", etc.)
#     @item_value => (REQUIRED) new value to add to a list of existing items
#     @item_class => (optional) CSS class to add to a new item
#     
#   REMOVE ITEM (@update_action => 'remove')
#     @list_type => (REQUIRED) Type of item list (e.g. "author_name_strings", "tags", etc.)
#     @item_id   => (REQUIRED) ID of an individual item in that list to remove
#   
# Other Possible Input Variables:
#     @clear_field => ID of HTML field to clear value from
#     @sortable    => If specified, the list will be configured (using Scriptaculous)
#                    to allow sorting / re-ordering of its items.

# Initialize optional input variables
@update_action ||= "init" #default to just an initialization action


##
# Remove actions
##
if @update_action.downcase=="remove" and @list_type and @item_id
  # remove the <li> field with the id of [list_type]_[item_id]
  page.remove @list_type+'_'+@item_id
end

if @update_action.downcase=="remove_author" and @ns_id
  page.remove "author_#{@ns_id}"
end

if @update_action.downcase=="remove_contributor" and @ns_id
  page.remove "contributor_#{@ns_id}"
end

##
# Add actions
##
if @update_action.downcase=="add" and @list_type and @item_value
  # add a new <li> field to the list using the 'list_item' partial
   page.insert_html :bottom, @list_type+'_list', :partial => "works/forms/fields/list_item", :locals => {:list_type => @list_type, :item_id => @item_value, :item_value => @item_value, :item_class => @item_class}
end

if @update_action.downcase=="add_author" and @ns_id
  page.insert_html :bottom, "author_name_strings_list", :partial => "works/forms/fields/author_list_item", :locals => {:ns_id => @ns_id}
end

if @update_action.downcase=="add_contributor" and @ns_id
  page.insert_html :bottom, "contributor_name_strings_list", :partial => "works/forms/fields/contributor_list_item", :locals => {:ns_id => @ns_id}
end

#If 'clear_field' was passed in, clear the value of that field
unless @clear_field.nil?
  page[@clear_field].value = ""
end

#If 'sortable' flag passed in, mark this list as sortable
unless @sortable.nil? or @list_type.nil?
  page.sortable @list_type+'_list', :update => 'list_hint', :only => 'movable', :url => {:action => "reorder_list", :list_type => @list_type}, :complete => visual_effect(:highlight, 'list_hint', :duration => 1.5)
end